apply plugin: 'java'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

// This is the library version used when deploying the artifact
version = "0.0.4"

sourceCompatibility = rootProject.ext.sourceCompatibilityVersion
targetCompatibility = rootProject.ext.targetCompatibilityVersion

def logger = new com.android.build.gradle.internal.LoggerWrapper(project.logger)
def sdkHandler = new com.android.build.gradle.internal.SdkHandler(project, logger)
for (File file : sdkHandler.sdkLoader.repositories) {
  repositories.maven {
    url = file.toURI()
  }
}

dependencies {
  compile project(':mvp-annotations')
  compile deps.autoservice
  compile deps.autocommon
  compile deps.javapoet
  compileOnly files(org.gradle.internal.jvm.Jvm.current().getToolsJar())

  testCompile deps.android
  testCompile deps.junit
  testCompile files(org.gradle.internal.jvm.Jvm.current().getToolsJar())
}


Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
properties.load(project.rootProject.file('deploy.settings').newDataInputStream())


def siteUrl =  properties.getProperty("siteUrl")     // Homepage URL of the library
def gitUrl = properties.getProperty("gitUrl")   // Git repository URL
def groupId = properties.getProperty("groupId")   // Git repository URL
def devId = properties.getProperty("developerId")   // Git repository URL
def devEmail = properties.getProperty("developerEmail")   // Git repository URL
def devName = properties.getProperty("developerName")   // Git repository URL
group = groupId

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
  archives sourcesJar, javadocJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      if (plugins.hasPlugin('war')) {
        from components.web
      } else {
        from components.java
      }

      artifact sourcesJar
      artifact javadocJar
    }
  }
}



bintray {
  user = properties.getProperty("bintray.user")
  key = properties.getProperty("bintray.apikey")
  publications = ['mavenJava']

  pkg {
    repo = "mvp"
    name = "mvp-compiler"
    websiteUrl = siteUrl
    vcsUrl = gitUrl
    licenses = ["Apache-2.0"]
    publish = true
  }
}


